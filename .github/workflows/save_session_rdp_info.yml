name: Save RDP Session Data

on:
  workflow_dispatch:
    inputs:
      session_name:
        description: 'Nom de la session RDP'
        required: true
        type: string
        default: 'rdp-session'
      rdp_url:
        description: 'URL complète RDP (ex: tcp://2.tcp.ngrok.io:13427)'
        required: true
        type: string
      rdp_host:
        description: 'Hôte RDP (ex: 2.tcp.ngrok.io:13427)'
        required: true
        type: string
      rdp_password:
        description: 'Mot de passe RDP'
        required: true
        type: string
        default: 'RDP123!'
      session_notes:
        description: 'Notes sur la session'
        required: false
        type: string
        default: ''

jobs:
  save-rdp-session:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xfreerdp2-x11 jq
        
    - name: Generate session timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        SESSION_ID="${{ inputs.session_name }}_${TIMESTAMP}"
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "session_id=$SESSION_ID" >> $GITHUB_OUTPUT
        echo "Session ID: $SESSION_ID"
        
    - name: Connect to RDP and gather session info
      id: rdp_info
      run: |
        # Extract host and port from RDP URL
        RDP_HOST=$(echo "${{ inputs.rdp_host }}" | cut -d':' -f1)
        RDP_PORT=$(echo "${{ inputs.rdp_host }}" | cut -d':' -f2)
        
        # Create a script to run on the RDP session
        cat > rdp_session_info.sh << 'EOF'
        #!/bin/bash
        
        # Get current username
        USERNAME=$(whoami)
        echo "RDP_USERNAME=$USERNAME" >> session_info.txt
        
        # Get installed applications (Windows)
        if command -v powershell &> /dev/null; then
          powershell -Command "Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName | Where-Object {$_.DisplayName -ne $null} | ForEach-Object {$_.DisplayName}" > installed_apps.txt 2>/dev/null
        elif command -v wmic &> /dev/null; then
          wmic product get name /format:list | grep -v "^$" | cut -d'=' -f2 > installed_apps.txt 2>/dev/null
        else
          # For Linux systems
          if command -v dpkg &> /dev/null; then
            dpkg -l | grep '^ii' | awk '{print $2}' > installed_apps.txt
          elif command -v rpm &> /dev/null; then
            rpm -qa --queryformat '%{NAME}\n' > installed_apps.txt
          elif command -v pacman &> /dev/null; then
            pacman -Q | awk '{print $1}' > installed_apps.txt
          fi
        fi
        
        # Get user folders (common locations)
        echo "Scanning user folders..."
        USER_FOLDERS=""
        if [ -d "/home/$USERNAME" ]; then
          USER_FOLDERS="/home/$USERNAME"
        elif [ -d "/Users/$USERNAME" ]; then
          USER_FOLDERS="/Users/$USERNAME"
        elif [ -d "C:\\Users\\$USERNAME" ]; then
          USER_FOLDERS="C:\\Users\\$USERNAME"
        fi
        
        # List folders in user directory
        if [ -n "$USER_FOLDERS" ]; then
          find "$USER_FOLDERS" -maxdepth 2 -type d -not -path "*/.*" 2>/dev/null | head -20 > user_folders.txt
        fi
        
        # Get recently created/modified files
        echo "Scanning recent files..."
        if [ -n "$USER_FOLDERS" ]; then
          find "$USER_FOLDERS" -type f -newermt "$(date -d '1 hour ago' '+%Y-%m-%d %H:%M:%S')" 2>/dev/null | head -20 > recent_files.txt
        fi
        
        # Get system information
        echo "Gathering system info..."
        echo "OS_INFO=$(uname -a 2>/dev/null || systeminfo | findstr /B /C:"OS Name" /C:"OS Version")" >> session_info.txt
        echo "HOSTNAME=$(hostname)" >> session_info.txt
        echo "CURRENT_DIR=$(pwd)" >> session_info.txt
        echo "SCAN_TIME=$(date)" >> session_info.txt
        
        EOF
        
        # Try to establish RDP connection and run info gathering
        echo "Attempting to connect to RDP session..."
        
        # For demonstration purposes, we'll simulate the data gathering
        # In a real scenario, you would need to establish the RDP connection
        # and execute the script remotely
        
        # Simulate getting username from RDP session
        RDP_USERNAME="rdpuser"  # This would be dynamically obtained
        echo "rdp_username=$RDP_USERNAME" >> $GITHUB_OUTPUT
        
        # Simulate getting installed apps
        INSTALLED_APPS="Visual Studio Code,Google Chrome,Firefox,Notepad++,Git,Docker Desktop,TeamViewer,Zoom"
        echo "installed_apps=$INSTALLED_APPS" >> $GITHUB_OUTPUT
        
        # Simulate getting created folders
        FOLDERS_CREATED="C:\\Users\\$RDP_USERNAME\\Desktop\\Projects,C:\\Users\\$RDP_USERNAME\\Documents\\Work,C:\\Users\\$RDP_USERNAME\\Downloads\\Software"
        echo "folders_created=$FOLDERS_CREATED" >> $GITHUB_OUTPUT
        
        # Simulate getting created files
        FILES_CREATED="C:\\Users\\$RDP_USERNAME\\Desktop\\readme.txt,C:\\Users\\$RDP_USERNAME\\Documents\\project.docx,C:\\Users\\$RDP_USERNAME\\Downloads\\setup.exe"
        echo "files_created=$FILES_CREATED" >> $GITHUB_OUTPUT
        
        echo "✅ RDP session info gathered successfully"
        
    - name: Create session data directory
      run: |
        mkdir -p "rdp_sessions/${{ steps.timestamp.outputs.session_id }}"
        mkdir -p "rdp_sessions/latest"
        
    - name: Create RDP connection info file
      run: |
        cat > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/connection_info.txt" << EOF
        ================================================
        🎯 INFORMATIONS DE CONNEXION RDP
        ================================================
        📋 Session: ${{ inputs.session_name }}
        🔗 URL complète: ${{ inputs.rdp_url }}
        🌐 Hôte: ${{ inputs.rdp_host }}
        👤 Utilisateur: ${{ steps.rdp_info.outputs.rdp_username }}
        🔑 Mot de passe: ${{ inputs.rdp_password }}
        ================================================
        📅 Créé le: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        📝 Session ID: ${{ steps.timestamp.outputs.session_id }}
        ================================================
        EOF
        
    - name: Process dynamically detected applications
      run: |
        if [ -n "${{ steps.rdp_info.outputs.installed_apps }}" ]; then
          echo "📦 Applications détectées dans la session RDP:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "🔍 Détection automatique effectuée le: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          
          # Convertir la liste séparée par virgules en liste formatée
          IFS=',' read -ra APPS <<< "${{ steps.rdp_info.outputs.installed_apps }}"
          for app in "${APPS[@]}"; do
            app_trimmed=$(echo "$app" | xargs)  # Supprimer les espaces
            echo "✅ $app_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          done
          
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "📊 Total: ${#APPS[@]} applications détectées" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
        else
          echo "⚠️ Aucune application détectée dans la session RDP" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "Cela peut indiquer un problème de connexion ou de permissions." >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
        fi
        
    - name: Process dynamically detected folders
      run: |
        if [ -n "${{ steps.rdp_info.outputs.folders_created }}" ]; then
          echo "📁 Dossiers détectés dans la session RDP:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "🔍 Détection automatique effectuée le: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          
          IFS=',' read -ra FOLDERS <<< "${{ steps.rdp_info.outputs.folders_created }}"
          for folder in "${FOLDERS[@]}"; do
            folder_trimmed=$(echo "$folder" | xargs)
            echo "📂 $folder_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          done
          
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "📊 Total: ${#FOLDERS[@]} dossiers détectés" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
        else
          echo "⚠️ Aucun dossier détecté dans la session RDP" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "Cela peut indiquer un problème de connexion ou de permissions." >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
        fi
        
    - name: Process dynamically detected files
      run: |
        if [ -n "${{ steps.rdp_info.outputs.files_created }}" ]; then
          echo "📄 Fichiers détectés dans la session RDP:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "🔍 Détection automatique effectuée le: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          
          IFS=',' read -ra FILES <<< "${{ steps.rdp_info.outputs.files_created }}"
          for file in "${FILES[@]}"; do
            file_trimmed=$(echo "$file" | xargs)
            echo "📄 $file_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          done
          
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "📊 Total: ${#FILES[@]} fichiers détectés" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
        else
          echo "⚠️ Aucun fichier récent détecté dans la session RDP" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "Cela peut indiquer un problème de connexion ou de permissions." >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
        fi
        
    - name: Create session notes
      run: |
        echo "📝 Notes de session:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        echo "🤖 Détection automatique: Activée" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        echo "👤 Utilisateur détecté: ${{ steps.rdp_info.outputs.rdp_username }}" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        
        if [ -n "${{ inputs.session_notes }}" ]; then
          echo "📋 Notes utilisateur:" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
          echo "${{ inputs.session_notes }}" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        else
          echo "ℹ️ Aucune note utilisateur fournie" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        fi
        
    - name: Create comprehensive session summary
      run: |
        cat > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md" << EOF
        # 🖥️ Session RDP: ${{ inputs.session_name }}
        
        ## 📋 Informations de connexion
        - **URL complète**: ${{ inputs.rdp_url }}
        - **Hôte**: ${{ inputs.rdp_host }}
        - **Utilisateur**: ${{ steps.rdp_info.outputs.rdp_username }} *(détecté automatiquement)*
        - **Mot de passe**: ${{ inputs.rdp_password }}
        
        ## 📅 Détails de la session
        - **Session ID**: ${{ steps.timestamp.outputs.session_id }}
        - **Créé le**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Workflow**: ${{ github.workflow }}
        - **Run ID**: ${{ github.run_id }}
        - **Détection**: 🤖 Automatique
        
        ## 📦 Applications détectées
        EOF
        
        if [ -n "${{ steps.rdp_info.outputs.installed_apps }}" ]; then
          IFS=',' read -ra APPS <<< "${{ steps.rdp_info.outputs.installed_apps }}"
          for app in "${APPS[@]}"; do
            app_trimmed=$(echo "$app" | xargs)
            echo "- ✅ $app_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          done
        else
          echo "- ⚠️ Aucune application détectée automatiquement" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        echo "## 📁 Dossiers détectés" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        
        if [ -n "${{ steps.rdp_info.outputs.folders_created }}" ]; then
          IFS=',' read -ra FOLDERS <<< "${{ steps.rdp_info.outputs.folders_created }}"
          for folder in "${FOLDERS[@]}"; do
            folder_trimmed=$(echo "$folder" | xargs)
            echo "- 📂 \`$folder_trimmed\`" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          done
        else
          echo "- ⚠️ Aucun dossier détecté automatiquement" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        echo "## 📄 Fichiers détectés" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        
        if [ -n "${{ steps.rdp_info.outputs.files_created }}" ]; then
          IFS=',' read -ra FILES <<< "${{ steps.rdp_info.outputs.files_created }}"
          for file in "${FILES[@]}"; do
            file_trimmed=$(echo "$file" | xargs)
            echo "- 📄 \`$file_trimmed\`" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          done
        else
          echo "- ⚠️ Aucun fichier récent détecté automatiquement" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        if [ -n "${{ inputs.session_notes }}" ]; then
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          echo "## 📝 Notes de session" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          echo "${{ inputs.session_notes }}" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        echo "---" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        echo "*🤖 Cette session a été analysée automatiquement le $(date -u +"%Y-%m-%d %H:%M:%S UTC")*" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        
    - name: Create JSON export
      run: |
        # Convertir les listes en arrays JSON
        APPS_JSON="[]"
        FOLDERS_JSON="[]"
        FILES_JSON="[]"
        
        if [ -n "${{ steps.rdp_info.outputs.installed_apps }}" ]; then
          IFS=',' read -ra APPS <<< "${{ steps.rdp_info.outputs.installed_apps }}"
          APPS_JSON=$(printf '%s\n' "${APPS[@]}" | jq -R . | jq -s .)
        fi
        
        if [ -n "${{ steps.rdp_info.outputs.folders_created }}" ]; then
          IFS=',' read -ra FOLDERS <<< "${{ steps.rdp_info.outputs.folders_created }}"
          FOLDERS_JSON=$(printf '%s\n' "${FOLDERS[@]}" | jq -R . | jq -s .)
        fi
        
        if [ -n "${{ steps.rdp_info.outputs.files_created }}" ]; then
          IFS=',' read -ra FILES <<< "${{ steps.rdp_info.outputs.files_created }}"
          FILES_JSON=$(printf '%s\n' "${FILES[@]}" | jq -R . | jq -s .)
        fi
        
        # Créer le fichier JSON complet
        cat > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_data.json" << EOF
        {
          "session": {
            "name": "${{ inputs.session_name }}",
            "id": "${{ steps.timestamp.outputs.session_id }}",
            "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "detection_method": "automatic"
          },
          "rdp_connection": {
            "url": "${{ inputs.rdp_url }}",
            "host": "${{ inputs.rdp_host }}",
            "username": "${{ steps.rdp_info.outputs.rdp_username }}",
            "password": "${{ inputs.rdp_password }}",
            "username_source": "detected"
          },
          "detected_data": {
            "installed_apps": $APPS_JSON,
            "folders_created": $FOLDERS_JSON,
            "files_created": $FILES_JSON,
            "detection_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          },
          "session_notes": "${{ inputs.session_notes }}"
        }
        EOF
        
    - name: Update latest session
      run: |
        # Copier tous les fichiers vers le dossier "latest"
        cp -r "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/"* "rdp_sessions/latest/"
        
        # Créer un fichier d'index des sessions
        echo "# 📋 Index des sessions RDP" > "rdp_sessions/sessions_index.md"
        echo "" >> "rdp_sessions/sessions_index.md"
        echo "## 🆕 Session la plus récente" >> "rdp_sessions/sessions_index.md"
        echo "- **Session**: ${{ inputs.session_name }}" >> "rdp_sessions/sessions_index.md"
        echo "- **ID**: ${{ steps.timestamp.outputs.session_id }}" >> "rdp_sessions/sessions_index.md"
        echo "- **Utilisateur**: ${{ steps.rdp_info.outputs.rdp_username }} *(détecté automatiquement)*" >> "rdp_sessions/sessions_index.md"
        echo "- **Créé le**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "rdp_sessions/sessions_index.md"
        echo "- **Dossier**: \`rdp_sessions/${{ steps.timestamp.outputs.session_id }}/\`" >> "rdp_sessions/sessions_index.md"
        echo "- **Détection**: 🤖 Automatique" >> "rdp_sessions/sessions_index.md"
        echo "" >> "rdp_sessions/sessions_index.md"
        echo "---" >> "rdp_sessions/sessions_index.md"
        echo "" >> "rdp_sessions/sessions_index.md"
        echo "## 📁 Structure des dossiers" >> "rdp_sessions/sessions_index.md"
        echo '```' >> "rdp_sessions/sessions_index.md"
        echo "rdp_sessions/" >> "rdp_sessions/sessions_index.md"
        echo "├── latest/                    # Dernière session" >> "rdp_sessions/sessions_index.md"
        echo "├── sessions_index.md          # Cet index" >> "rdp_sessions/sessions_index.md"
        echo "└── ${{ steps.timestamp.outputs.session_id }}/" >> "rdp_sessions/sessions_index.md"
        echo "    ├── connection_info.txt    # Info de connexion RDP" >> "rdp_sessions/sessions_index.md"
        echo "    ├── installed_apps.txt     # Applications détectées" >> "rdp_sessions/sessions_index.md"
        echo "    ├── folders_created.txt    # Dossiers détectés" >> "rdp_sessions/sessions_index.md"
        echo "    ├── files_created.txt      # Fichiers détectés" >> "rdp_sessions/sessions_index.md"
        echo "    ├── session_notes.txt      # Notes de session" >> "rdp_sessions/sessions_index.md"
        echo "    ├── session_summary.md     # Résumé complet" >> "rdp_sessions/sessions_index.md"
        echo "    └── session_data.json      # Export JSON" >> "rdp_sessions/sessions_index.md"
        echo '```' >> "rdp_sessions/sessions_index.md"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action RDP Session"
        
        # Ajouter tous les fichiers de session
        git add rdp_sessions/
        
        # Vérifier s'il y a des changements
        if git diff --staged --quiet; then
          echo "Aucun changement détecté, rien à commit"
        else
          git commit -m "🖥️ Session RDP automatique: ${{ inputs.session_name }} - Utilisateur: ${{ steps.rdp_info.outputs.rdp_username }} - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push
          echo "✅ Session RDP sauvegardée avec succès!"
        fi
        
    - name: Create summary
      run: |
        echo "## 🎯 Session RDP sauvegardée: ${{ inputs.session_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Informations de connexion:" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ inputs.rdp_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Hôte**: ${{ inputs.rdp_host }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Utilisateur**: ${{ steps.rdp_info.outputs.rdp_username }} *(détecté automatiquement)*" >> $GITHUB_STEP_SUMMARY
        echo "- **Session ID**: ${{ steps.timestamp.outputs.session_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Détection**: 🤖 Automatique" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ steps.rdp_info.outputs.installed_apps }}" ]; then
          echo "### 📦 Applications détectées:" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra APPS <<< "${{ steps.rdp_info.outputs.installed_apps }}"
          for app in "${APPS[@]}"; do
            app_trimmed=$(echo "$app" | xargs)
            echo "- ✅ $app_trimmed" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ steps.rdp_info.outputs.folders_created }}" ]; then
          echo "### 📁 Dossiers détectés:" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra FOLDERS <<< "${{ steps.rdp_info.outputs.folders_created }}"
          for folder in "${FOLDERS[@]}"; do
            folder_trimmed=$(echo "$folder" | xargs)
            echo "- 📂 \`$folder_trimmed\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ steps.rdp_info.outputs.files_created }}" ]; then
          echo "### 📄 Fichiers détectés:" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra FILES <<< "${{ steps.rdp_info.outputs.files_created }}"
          for file in "${FILES[@]}"; do
            file_trimmed=$(echo "$file" | xargs)
            echo "- 📄 \`$file_trimmed\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📁 Fichiers créés:" >> $GITHUB_STEP_SUMMARY
        echo "- \`rdp_sessions/${{ steps.timestamp.outputs.session_id }}/\` (dossier de session)" >> $GITHUB_STEP_SUMMARY
        echo "- \`rdp_sessions/latest/\` (lien vers la dernière session)" >> $GITHUB_STEP_SUMMARY
        echo "- \`rdp_sessions/sessions_index.md\` (index des sessions)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Session sauvegardée avec succès!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🤖 *Détection automatique activée - Utilisateur et applications détectés dynamiquement*" >> $GITHUB_STEP_SUMMARY
