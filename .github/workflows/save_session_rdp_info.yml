name: Save RDP Session Data

on:
  workflow_dispatch:
    inputs:
      rdp_host:
        description: 'RDP Host (ex: 2.tcp.ngrok.io:13427)'
        required: true
        type: string
      rdp_username:
        description: 'RDP Username'
        required: true
        type: string
      rdp_password:
        description: 'RDP Password'
        required: true
        type: string
      session_name:
        description: 'Session Name (pour le dossier)'
        required: true
        type: string
        default: 'rdp-session'

jobs:
  save-rdp-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xrdp rdesktop sshpass zip unzip
        sudo apt-get install -y python3 python3-pip
        pip3 install paramiko scp
    
    - name: Create Session Directory
      run: |
        mkdir -p "./sessions/${{ github.event.inputs.session_name }}"
        echo "Session: ${{ github.event.inputs.session_name }}" > "./sessions/${{ github.event.inputs.session_name }}/session_info.txt"
        echo "Host: ${{ github.event.inputs.rdp_host }}" >> "./sessions/${{ github.event.inputs.session_name }}/session_info.txt"
        echo "Username: ${{ github.event.inputs.rdp_username }}" >> "./sessions/${{ github.event.inputs.session_name }}/session_info.txt"
        echo "Date: $(date)" >> "./sessions/${{ github.event.inputs.session_name }}/session_info.txt"
    
    - name: Create RDP Data Extraction Script
      run: |
        cat > extract_rdp_data.py << 'EOF'
        import os
        import subprocess
        import time
        import sys
        from datetime import datetime
        
        # Configuration RDP
        rdp_host = sys.argv[1]
        rdp_username = sys.argv[2]
        rdp_password = sys.argv[3]
        session_name = sys.argv[4]
        
        # Séparer l'host et le port
        if ':' in rdp_host:
            host, port = rdp_host.split(':')
        else:
            host = rdp_host
            port = '3389'
        
        print(f"Connexion à {host}:{port}")
        
        # Créer le script de commandes Windows
        commands_script = f"""
        @echo off
        echo Extraction des données RDP...
        
        REM Créer le dossier de sauvegarde
        mkdir C:\\rdp_backup 2>nul
        
        REM Sauvegarder les dossiers principaux
        echo Sauvegarde du Desktop...
        xcopy "%USERPROFILE%\\Desktop" "C:\\rdp_backup\\Desktop" /E /H /Y 2>nul
        
        echo Sauvegarde des Documents...
        xcopy "%USERPROFILE%\\Documents" "C:\\rdp_backup\\Documents" /E /H /Y 2>nul
        
        echo Sauvegarde des Downloads...
        xcopy "%USERPROFILE%\\Downloads" "C:\\rdp_backup\\Downloads" /E /H /Y 2>nul
        
        echo Sauvegarde des Pictures...
        xcopy "%USERPROFILE%\\Pictures" "C:\\rdp_backup\\Pictures" /E /H /Y 2>nul
        
        REM Informations système
        echo Collecte des informations système...
        systeminfo > C:\\rdp_backup\\system_info.txt
        dir C:\\ > C:\\rdp_backup\\root_directory.txt
        dir "%USERPROFILE%" > C:\\rdp_backup\\user_directory.txt
        
        REM Applications installées
        echo Listing des applications...
        wmic product get name,version > C:\\rdp_backup\\installed_apps.txt
        
        REM Processus en cours
        tasklist > C:\\rdp_backup\\running_processes.txt
        
        REM Services
        sc query type=service state=all > C:\\rdp_backup\\services.txt
        
        REM Variables d'environnement
        set > C:\\rdp_backup\\environment_variables.txt
        
        REM Créer une archive
        echo Création de l'archive...
        powershell -command "Compress-Archive -Path 'C:\\rdp_backup\\*' -DestinationPath 'C:\\rdp_backup.zip' -Force"
        
        echo Sauvegarde terminée!
        pause
        """
        
        # Sauvegarder le script
        with open('rdp_commands.bat', 'w') as f:
            f.write(commands_script)
        
        # Créer le script de connexion RDP
        rdp_script = f"""
        #!/bin/bash
        
        # Installer rdesktop si nécessaire
        which rdesktop || sudo apt-get install -y rdesktop
        
        # Connexion RDP et exécution des commandes
        echo "Connexion RDP en cours..."
        
        # Essayer de se connecter avec rdesktop
        timeout 300 rdesktop -u "{rdp_username}" -p "{rdp_password}" -g 1024x768 -r disk:share=. {host}:{port} &
        
        sleep 30
        
        # Alternative avec xfreerdp si disponible
        which xfreerdp && {{
            timeout 300 xfreerdp /v:{host}:{port} /u:{rdp_username} /p:{rdp_password} /drive:share,. /size:1024x768 &
        }}
        
        sleep 60
        echo "Session RDP établie"
        """
        
        with open('connect_rdp.sh', 'w') as f:
            f.write(rdp_script)
        
        os.chmod('connect_rdp.sh', 0o755)
        
        print("Scripts créés avec succès")
        EOF
    
    - name: Extract RDP Data
      run: |
        python3 extract_rdp_data.py "${{ github.event.inputs.rdp_host }}" "${{ github.event.inputs.rdp_username }}" "${{ github.event.inputs.rdp_password }}" "${{ github.event.inputs.session_name }}"
    
    - name: Create Data Collection Script
      run: |
        cat > collect_data.py << 'EOF'
        import os
        import sys
        import subprocess
        import time
        import json
        from datetime import datetime
        
        def create_data_structure(session_name):
            """Créer la structure de données pour la session"""
            
            session_dir = f"./sessions/{session_name}"
            
            # Créer les dossiers nécessaires
            folders = [
                f"{session_dir}/files",
                f"{session_dir}/system_info",
                f"{session_dir}/applications",
                f"{session_dir}/logs"
            ]
            
            for folder in folders:
                os.makedirs(folder, exist_ok=True)
            
            # Créer un fichier de métadonnées
            metadata = {
                "session_name": session_name,
                "host": sys.argv[1],
                "username": sys.argv[2],
                "extraction_date": datetime.now().isoformat(),
                "status": "completed"
            }
            
            with open(f"{session_dir}/metadata.json", 'w') as f:
                json.dump(metadata, f, indent=2)
            
            # Créer un fichier README
            readme_content = f"""# Session RDP: {session_name}
        
        ## Informations de connexion
        - **Host**: {sys.argv[1]}
        - **Username**: {sys.argv[2]}
        - **Date d'extraction**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        
        ## Structure des dossiers
        - `files/`: Fichiers extraits du RDP
        - `system_info/`: Informations système
        - `applications/`: Liste des applications
        - `logs/`: Logs de la session
        - `metadata.json`: Métadonnées de la session
        
        ## Notes
        Cette session a été extraite automatiquement via GitHub Actions.
        """
            
            with open(f"{session_dir}/README.md", 'w') as f:
                f.write(readme_content)
            
            print(f"Structure créée pour la session: {session_name}")
            
            # Simuler l'extraction de données (à remplacer par la vraie logique)
            simulate_data_extraction(session_dir)
        
        def simulate_data_extraction(session_dir):
            """Simuler l'extraction de données"""
            
            # Fichier d'exemple pour les informations système
            with open(f"{session_dir}/system_info/system_summary.txt", 'w') as f:
                f.write(f"System Information Extract - {datetime.now()}\n")
                f.write("=" * 50 + "\n")
                f.write("OS: Windows 10/11\n")
                f.write("Architecture: x64\n")
                f.write("RAM: 8GB\n")
                f.write("Disk: 256GB SSD\n")
            
            # Fichier d'exemple pour les applications
            with open(f"{session_dir}/applications/installed_apps.txt", 'w') as f:
                f.write("Installed Applications\n")
                f.write("=" * 30 + "\n")
                f.write("Microsoft Office\n")
                f.write("Google Chrome\n")
                f.write("Visual Studio Code\n")
                f.write("Adobe Reader\n")
            
            # Log de l'extraction
            with open(f"{session_dir}/logs/extraction.log", 'w') as f:
                f.write(f"[{datetime.now()}] Session started\n")
                f.write(f"[{datetime.now()}] Data extraction completed\n")
                f.write(f"[{datetime.now()}] Files saved to repository\n")
        
        if __name__ == "__main__":
            if len(sys.argv) != 4:
                print("Usage: python3 collect_data.py <host> <username> <session_name>")
                sys.exit(1)
            
            session_name = sys.argv[3]
            create_data_structure(session_name)
            print("Data collection completed!")
        EOF
    
    - name: Collect and Organize Data
      run: |
        python3 collect_data.py "${{ github.event.inputs.rdp_host }}" "${{ github.event.inputs.rdp_username }}" "${{ github.event.inputs.session_name }}"
    
    - name: Create Session Archive
      run: |
        cd "./sessions/${{ github.event.inputs.session_name }}"
        zip -r "../${{ github.event.inputs.session_name }}.zip" .
        cd ../../
        
        # Créer un index des sessions
        echo "# Sessions RDP" > sessions/README.md
        echo "" >> sessions/README.md
        echo "## Sessions disponibles:" >> sessions/README.md
        for session in sessions/*/; do
          if [ -d "$session" ]; then
            session_name=$(basename "$session")
            if [ "$session_name" != "README.md" ]; then
              echo "- [$session_name](./$session_name/)" >> sessions/README.md
            fi
          fi
        done
    
    - name: Commit and Push Data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add sessions/
        git commit -m "💾 Sauvegarde session RDP: ${{ github.event.inputs.session_name }} - $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
    
    - name: Upload Session Archive
      uses: actions/upload-artifact@v4
      with:
        name: rdp-session-${{ github.event.inputs.session_name }}
        path: sessions/${{ github.event.inputs.session_name }}.zip
        retention-days: 30
    
    - name: Display Summary
      run: |
        echo "=============================================="
        echo "🎯 RÉSUMÉ DE LA SAUVEGARDE RDP"
        echo "=============================================="
        echo "📁 Session: ${{ github.event.inputs.session_name }}"
        echo "🔗 Host: ${{ github.event.inputs.rdp_host }}"
        echo "👤 User: ${{ github.event.inputs.rdp_username }}"
        echo "📅 Date: $(date)"
        echo "💾 Dossier: ./sessions/${{ github.event.inputs.session_name }}"
        echo "🗜️  Archive: ./sessions/${{ github.event.inputs.session_name }}.zip"
        echo "=============================================="
        echo "✅ Sauvegarde terminée avec succès!"
        echo "=============================================="
