name: Save RDP Session Data

on:
  workflow_dispatch:
    inputs:
      session_name:
        description: 'Nom de la session RDP'
        required: true
        type: string
        default: 'rdp-session'
      rdp_url:
        description: 'URL compl√®te RDP (ex: tcp://2.tcp.ngrok.io:13427)'
        required: true
        type: string
      rdp_host:
        description: 'H√¥te RDP (ex: 2.tcp.ngrok.io:13427)'
        required: true
        type: string
      rdp_user:
        description: 'Nom d utilisateur RDP'
        required: true
        type: string
        default: 'rdpuser'
      rdp_password:
        description: 'Mot de passe RDP'
        required: true
        type: string
        default: 'RDP123!'
      installed_apps:
        description: 'Applications install√©es (s√©par√©es par des virgules)'
        required: false
        type: string
        default: ''
      folders_created:
        description: 'Dossiers cr√©√©s (s√©par√©s par des virgules)'
        required: false
        type: string
        default: ''
      files_created:
        description: 'Fichiers cr√©√©s (s√©par√©s par des virgules)'
        required: false
        type: string
        default: ''
      session_notes:
        description: 'Notes sur la session'
        required: false
        type: string
        default: ''

jobs:
  save-rdp-session:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}
        
    - name: Generate session timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        SESSION_ID="${{ inputs.session_name }}_${TIMESTAMP}"
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "session_id=$SESSION_ID" >> $GITHUB_OUTPUT
        echo "Session ID: $SESSION_ID"
        
    - name: Create session data directory
      run: |
        mkdir -p "rdp_sessions/${{ steps.timestamp.outputs.session_id }}"
        mkdir -p "rdp_sessions/latest"
        
    - name: Create RDP connection info file
      run: |
        cat > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/connection_info.txt" << EOF
        ================================================
        üéØ INFORMATIONS DE CONNEXION RDP
        ================================================
        üìã Session: ${{ inputs.session_name }}
        üîó URL compl√®te: ${{ inputs.rdp_url }}
        üåê H√¥te: ${{ inputs.rdp_host }}
        üë§ Utilisateur: ${{ inputs.rdp_user }}
        üîë Mot de passe: ${{ inputs.rdp_password }}
        ================================================
        üìÖ Cr√©√© le: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        üìù Session ID: ${{ steps.timestamp.outputs.session_id }}
        ================================================
        EOF
        
    - name: Process installed applications
      run: |
        if [ -n "${{ inputs.installed_apps }}" ]; then
          echo "üì¶ Applications install√©es dans cette session:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          
          # Convertir la liste s√©par√©e par virgules en liste format√©e
          IFS=',' read -ra APPS <<< "${{ inputs.installed_apps }}"
          for app in "${APPS[@]}"; do
            app_trimmed=$(echo "$app" | xargs)  # Supprimer les espaces
            echo "‚úÖ $app_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          done
          
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
          echo "Total: ${#APPS[@]} applications install√©es" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
        else
          echo "‚ÑπÔ∏è Aucune application sp√©cifi√©e pour cette session" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/installed_apps.txt"
        fi
        
    - name: Process folders created
      run: |
        if [ -n "${{ inputs.folders_created }}" ]; then
          echo "üìÅ Dossiers cr√©√©s dans cette session:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          
          IFS=',' read -ra FOLDERS <<< "${{ inputs.folders_created }}"
          for folder in "${FOLDERS[@]}"; do
            folder_trimmed=$(echo "$folder" | xargs)
            echo "üìÇ $folder_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          done
          
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
          echo "Total: ${#FOLDERS[@]} dossiers cr√©√©s" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
        else
          echo "‚ÑπÔ∏è Aucun dossier sp√©cifi√© pour cette session" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/folders_created.txt"
        fi
        
    - name: Process files created
      run: |
        if [ -n "${{ inputs.files_created }}" ]; then
          echo "üìÑ Fichiers cr√©√©s dans cette session:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          
          IFS=',' read -ra FILES <<< "${{ inputs.files_created }}"
          for file in "${FILES[@]}"; do
            file_trimmed=$(echo "$file" | xargs)
            echo "üìÑ $file_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          done
          
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
          echo "Total: ${#FILES[@]} fichiers cr√©√©s" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
        else
          echo "‚ÑπÔ∏è Aucun fichier sp√©cifi√© pour cette session" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/files_created.txt"
        fi
        
    - name: Create session notes
      run: |
        if [ -n "${{ inputs.session_notes }}" ]; then
          echo "üìù Notes de session:" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
          echo "================================================" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
          echo "${{ inputs.session_notes }}" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        else
          echo "‚ÑπÔ∏è Aucune note pour cette session" > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_notes.txt"
        fi
        
    - name: Create comprehensive session summary
      run: |
        cat > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md" << EOF
        # üñ•Ô∏è Session RDP: ${{ inputs.session_name }}
        
        ## üìã Informations de connexion
        - **URL compl√®te**: ${{ inputs.rdp_url }}
        - **H√¥te**: ${{ inputs.rdp_host }}
        - **Utilisateur**: ${{ inputs.rdp_user }}
        - **Mot de passe**: ${{ inputs.rdp_password }}
        
        ## üìÖ D√©tails de la session
        - **Session ID**: ${{ steps.timestamp.outputs.session_id }}
        - **Cr√©√© le**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Workflow**: ${{ github.workflow }}
        - **Run ID**: ${{ github.run_id }}
        
        ## üì¶ Applications install√©es
        EOF
        
        if [ -n "${{ inputs.installed_apps }}" ]; then
          IFS=',' read -ra APPS <<< "${{ inputs.installed_apps }}"
          for app in "${APPS[@]}"; do
            app_trimmed=$(echo "$app" | xargs)
            echo "- ‚úÖ $app_trimmed" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          done
        else
          echo "- ‚ÑπÔ∏è Aucune application sp√©cifi√©e" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        echo "## üìÅ Dossiers cr√©√©s" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        
        if [ -n "${{ inputs.folders_created }}" ]; then
          IFS=',' read -ra FOLDERS <<< "${{ inputs.folders_created }}"
          for folder in "${FOLDERS[@]}"; do
            folder_trimmed=$(echo "$folder" | xargs)
            echo "- üìÇ \`$folder_trimmed\`" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          done
        else
          echo "- ‚ÑπÔ∏è Aucun dossier sp√©cifi√©" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        echo "## üìÑ Fichiers cr√©√©s" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        
        if [ -n "${{ inputs.files_created }}" ]; then
          IFS=',' read -ra FILES <<< "${{ inputs.files_created }}"
          for file in "${FILES[@]}"; do
            file_trimmed=$(echo "$file" | xargs)
            echo "- üìÑ \`$file_trimmed\`" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          done
        else
          echo "- ‚ÑπÔ∏è Aucun fichier sp√©cifi√©" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
        if [ -n "${{ inputs.session_notes }}" ]; then
          echo "" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          echo "## üìù Notes de session" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
          echo "${{ inputs.session_notes }}" >> "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_summary.md"
        fi
        
    - name: Create JSON export
      run: |
        # Convertir les listes en arrays JSON
        APPS_JSON="[]"
        FOLDERS_JSON="[]"
        FILES_JSON="[]"
        
        if [ -n "${{ inputs.installed_apps }}" ]; then
          IFS=',' read -ra APPS <<< "${{ inputs.installed_apps }}"
          APPS_JSON=$(printf '%s\n' "${APPS[@]}" | jq -R . | jq -s .)
        fi
        
        if [ -n "${{ inputs.folders_created }}" ]; then
          IFS=',' read -ra FOLDERS <<< "${{ inputs.folders_created }}"
          FOLDERS_JSON=$(printf '%s\n' "${FOLDERS[@]}" | jq -R . | jq -s .)
        fi
        
        if [ -n "${{ inputs.files_created }}" ]; then
          IFS=',' read -ra FILES <<< "${{ inputs.files_created }}"
          FILES_JSON=$(printf '%s\n' "${FILES[@]}" | jq -R . | jq -s .)
        fi
        
        # Cr√©er le fichier JSON complet
        cat > "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/session_data.json" << EOF
        {
          "session": {
            "name": "${{ inputs.session_name }}",
            "id": "${{ steps.timestamp.outputs.session_id }}",
            "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}"
          },
          "rdp_connection": {
            "url": "${{ inputs.rdp_url }}",
            "host": "${{ inputs.rdp_host }}",
            "username": "${{ inputs.rdp_user }}",
            "password": "${{ inputs.rdp_password }}"
          },
          "installed_apps": $APPS_JSON,
          "folders_created": $FOLDERS_JSON,
          "files_created": $FILES_JSON,
          "session_notes": "${{ inputs.session_notes }}"
        }
        EOF
        
    - name: Update latest session
      run: |
        # Copier tous les fichiers vers le dossier "latest"
        cp -r "rdp_sessions/${{ steps.timestamp.outputs.session_id }}/"* "rdp_sessions/latest/"
        
        # Cr√©er un fichier d'index des sessions
        echo "# üìã Index des sessions RDP" > "rdp_sessions/sessions_index.md"
        echo "" >> "rdp_sessions/sessions_index.md"
        echo "## üÜï Session la plus r√©cente" >> "rdp_sessions/sessions_index.md"
        echo "- **Session**: ${{ inputs.session_name }}" >> "rdp_sessions/sessions_index.md"
        echo "- **ID**: ${{ steps.timestamp.outputs.session_id }}" >> "rdp_sessions/sessions_index.md"
        echo "- **Cr√©√© le**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "rdp_sessions/sessions_index.md"
        echo "- **Dossier**: \`rdp_sessions/${{ steps.timestamp.outputs.session_id }}/\`" >> "rdp_sessions/sessions_index.md"
        echo "" >> "rdp_sessions/sessions_index.md"
        echo "---" >> "rdp_sessions/sessions_index.md"
        echo "" >> "rdp_sessions/sessions_index.md"
        echo "## üìÅ Structure des dossiers" >> "rdp_sessions/sessions_index.md"
        echo '```' >> "rdp_sessions/sessions_index.md"
        echo "rdp_sessions/" >> "rdp_sessions/sessions_index.md"
        echo "‚îú‚îÄ‚îÄ latest/                    # Derni√®re session" >> "rdp_sessions/sessions_index.md"
        echo "‚îú‚îÄ‚îÄ sessions_index.md          # Cet index" >> "rdp_sessions/sessions_index.md"
        echo "‚îî‚îÄ‚îÄ ${{ steps.timestamp.outputs.session_id }}/" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îú‚îÄ‚îÄ connection_info.txt    # Info de connexion RDP" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îú‚îÄ‚îÄ installed_apps.txt     # Applications install√©es" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îú‚îÄ‚îÄ folders_created.txt    # Dossiers cr√©√©s" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îú‚îÄ‚îÄ files_created.txt      # Fichiers cr√©√©s" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îú‚îÄ‚îÄ session_notes.txt      # Notes de session" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îú‚îÄ‚îÄ session_summary.md     # R√©sum√© complet" >> "rdp_sessions/sessions_index.md"
        echo "    ‚îî‚îÄ‚îÄ session_data.json      # Export JSON" >> "rdp_sessions/sessions_index.md"
        echo '```' >> "rdp_sessions/sessions_index.md"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action RDP Session"
        
        # Ajouter tous les fichiers de session
        git add rdp_sessions/
        
        # V√©rifier s'il y a des changements
        if git diff --staged --quiet; then
          echo "Aucun changement d√©tect√©, rien √† commit"
        else
          git commit -m "üñ•Ô∏è Nouvelle session RDP: ${{ inputs.session_name }} - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push
          echo "‚úÖ Session RDP sauvegard√©e avec succ√®s!"
        fi
        
    - name: Create summary
      run: |
        echo "## üéØ Session RDP sauvegard√©e: ${{ inputs.session_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Informations de connexion:" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ inputs.rdp_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **H√¥te**: ${{ inputs.rdp_host }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Utilisateur**: ${{ inputs.rdp_user }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Session ID**: ${{ steps.timestamp.outputs.session_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ inputs.installed_apps }}" ]; then
          echo "### üì¶ Applications install√©es:" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra APPS <<< "${{ inputs.installed_apps }}"
          for app in "${APPS[@]}"; do
            app_trimmed=$(echo "$app" | xargs)
            echo "- ‚úÖ $app_trimmed" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ inputs.folders_created }}" ]; then
          echo "### üìÅ Dossiers cr√©√©s:" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra FOLDERS <<< "${{ inputs.folders_created }}"
          for folder in "${FOLDERS[@]}"; do
            folder_trimmed=$(echo "$folder" | xargs)
            echo "- üìÇ \`$folder_trimmed\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ inputs.files_created }}" ]; then
          echo "### üìÑ Fichiers cr√©√©s:" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra FILES <<< "${{ inputs.files_created }}"
          for file in "${FILES[@]}"; do
            file_trimmed=$(echo "$file" | xargs)
            echo "- üìÑ \`$file_trimmed\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### üìÅ Fichiers cr√©√©s:" >> $GITHUB_STEP_SUMMARY
        echo "- \`rdp_sessions/${{ steps.timestamp.outputs.session_id }}/\` (dossier de session)" >> $GITHUB_STEP_SUMMARY
        echo "- \`rdp_sessions/latest/\` (lien vers la derni√®re session)" >> $GITHUB_STEP_SUMMARY
        echo "- \`rdp_sessions/sessions_index.md\` (index des sessions)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Session sauvegard√©e avec succ√®s!**" >> $GITHUB_STEP_SUMMARY
